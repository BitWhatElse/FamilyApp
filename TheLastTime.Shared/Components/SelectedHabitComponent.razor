@if (State.SelectedHabit != null)
{
    <div id="overlay" class="col-md-12 col-lg-6 px-1 px-sm-3 d-flex">
        <div class="card flex-grow-1">

            <div class="card-body p-2 p-sm-3">
                <Button class="close" @onclick="@(() => { State.SelectedHabit = null; })"><span class="fa fa-fw fa-times text-muted"></span></Button>

                <p>
                    @if (DataService.Settings.ShowPinStar2min)
                    {
                        <span class="m-1" style="cursor: pointer;" @onclick="@(async () => { State.SelectedHabit.IsPinned = !State.SelectedHabit.IsPinned; if (!State.EditHabit) { await SaveHabit(State.SelectedHabit); } })">
                            @if (State.SelectedHabit.IsPinned)
                            {
                                <span class="fas fa-fw fa-thumbtack"></span><span class="font-weight-bold"> Pinned</span>
                            }
                            else
                            {
                                <span class="fas fa-fw fa-thumbtack fa-rotate-90"></span><span class="font-italic"> Pin</span>
                            }
                        </span>

                        <span class="m-1" style="cursor: pointer;" @onclick="@(async () => { State.SelectedHabit.IsStarred = !State.SelectedHabit.IsStarred; if (!State.EditHabit) { await SaveHabit(State.SelectedHabit); } })">
                            @if (State.SelectedHabit.IsStarred)
                            {
                                <span class="fas fa-fw fa-star"></span><span class="font-weight-bold"> Starred</span>
                            }
                            else
                            {
                                <span class="far fa-fw fa-star"></span><span class="font-italic"> Star</span>
                            }
                        </span>

                        <span class="m-1" style="cursor: pointer;" @onclick="@(async () => { State.SelectedHabit.IsTwoMinute = !State.SelectedHabit.IsTwoMinute; if (!State.EditHabit) { await SaveHabit(State.SelectedHabit); } })">
                            @if (State.SelectedHabit.IsTwoMinute)
                            {
                                <span class="fas fa-fw fa-hourglass"></span><span class="font-weight-bold"> 2 min</span>
                            }
                            else
                            {
                                <span class="far fa-fw fa-hourglass"></span><span class="font-italic"> * min</span>
                            }
                        </span>
                    }
                </p>

                @if (DataService.Settings.ShowCategories)
                {
                    <div>Habit category:</div>
                    <div>
                        <Select TValue="long" Size="@Theme.Size" SelectedValue="@State.SelectedHabit.CategoryId" SelectedValueChanged="async (long val) => { State.SelectedHabit.CategoryId = val; if (!State.EditHabit) { await SaveHabit(State.SelectedHabit); } }">
                            @foreach (Category cat in DataService.CategoryList)
                            {
                                <SelectItem Value="@cat.Id">@cat.Description</SelectItem>
                            }
                        </Select>
                    </div>
                }

                @if (DataService.Settings.ShowHabitIdUpDownButtons)
                {
                    <div class="mt-3">Habit index:</div>

                    <div class="input-group flex-nowrap mb-3">
                        @if (newHabitId == -1)
                        {
                            <div class="input-group-prepend">
                                <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="@(async () => { await HabitUpDown(State.SelectedHabit.Id, State.SelectedHabit.Id - 1); })"><span class="fa fa-fw fa-arrow-up"></span></Button>
                            </div>
                        }
                        <NumericEdit Size="@Theme.Size" TValue="long" Min="1" Max="9000" Value="State.SelectedHabit.Id" ValueChanged="(val) => { newHabitId = val; }" />
                        @if (newHabitId == -1)
                        {
                            <div class="input-group-append">
                                <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="@(async () => { await HabitUpDown(State.SelectedHabit.Id, State.SelectedHabit.Id + 1); })"><span class="fa fa-fw fa-arrow-down"></span></Button>
                            </div>
                        }
                        @if (newHabitId != -1)
                        {
                            <div class="input-group-append">
                                <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="@(async () => { await HabitUpDown(State.SelectedHabit.Id, newHabitId); newHabitId = -1; })"><span class="fa fa-fw fa-save"></span></Button>
                                <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="@(async () => { newHabitId = -1; var temp = State.SelectedHabit; State.SelectedHabit = null; await Task.Delay(1); State.SelectedHabit = temp; })"><span class="fa fa-fw fa-times"></span></Button>
                            </div>
                        }
                    </div>
                }

                <div class="mt-3">Habit description:</div>

                @if (State.EditHabit)
                {
                    <div class="input-group flex-nowrap mb-3">
                        <TextEdit Size="@Theme.Size" @bind-Text="@State.SelectedHabit.Description" Placeholder="Add new habit" />
                        <div class="input-group-append">
                            <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="@(async () => { await SaveHabit(State.SelectedHabit); State.EditHabit = false; })"><span class="fa fa-fw fa-save"></span></Button>
                            <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="@(() => { State.EditHabit = false; })"><span class="fa fa-fw fa-times"></span></Button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="input-group flex-nowrap mb-3 d-flex">

                        <TextEdit Size="@Theme.Size" ReadOnly="true" Text="@State.SelectedHabit.Description" />

                        <div class="input-group-append">
                            <TextEdit Class="rounded-0 border-right-0" Size="@Theme.Size" ReadOnly="true" Text="@("Done: " + State.SelectedHabit.TimeList.Count + "x")" VisibleCharacters="@(("Done: " + State.SelectedHabit.TimeList.Count + "x").Length)" />

                            <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="@(() => { State.EditHabit = true; })"><span class="fa fa-fw fa-edit"></span></Button>
                            <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="@(async () => { await DataService.DeleteHabit(State.SelectedHabit); State.SelectedHabit = null; })"><span class="fa fa-fw fa-trash-alt"></span></Button>
                        </div>
                    </div>
                }

                @if (DataService.Settings.ShowAverageInterval && State.SelectedHabit.TimeList.Count > 1)
                {
                    <p>
                        <span class="fas fa-fw fa-stopwatch"></span> @( "Average interval: " + ToReadableString(State.SelectedHabit.AverageInterval) )

                        @if (State.SelectedHabit.IsElapsedOverAverage)
                        {
                            <div><span class="fas fa-fw fa-exclamation"></span><span class="font-weight-bold"> @( "Average interval is overdue by: " + ToReadableString(State.SelectedHabit.ElapsedTime - State.SelectedHabit.AverageInterval) + " ( " + (State.SelectedHabit.ElapsedToAverageRatio - 100).ToString("N0") + " % )" )</span></div>
                        }
                    </p>
                }

                @if (DataService.Settings.ShowDesiredInterval)
                {
                    <p>
                        <span class="fas fa-fw fa-stopwatch"></span> @("Desired interval:")
                        <div class="input-group flex-nowrap my-1">
                            <NumericEdit Size="@Theme.Size" TValue="int?" Min="0" Max="9000" Value="State.SelectedHabit.DesiredInterval.Days" ValueChanged="async (val) => { await State.SetDesiredIntervalDays(val ?? 0); }" />
                            <TextEdit Size="@Theme.Size" ReadOnly="true" Text="@(State.SelectedHabit.DesiredInterval.Days == 1 ? "day" : "days")" />
                            <NumericEdit Size="@Theme.Size" TValue="int?" Min="0" Max="23" Value="State.SelectedHabit.DesiredInterval.Hours" ValueChanged="async (val) => { await State.SetDesiredIntervalHours(val ?? 0); }" />
                            <TextEdit Size="@Theme.Size" ReadOnly="true" Text="@(State.SelectedHabit.DesiredInterval.Hours == 1 ? "hour" : "hours")" />
                        </div>

                        @if (State.SelectedHabit.IsElapsedOverDesired)
                        {
                            <div><span class="fas fa-fw fa-exclamation"></span><span class="font-weight-bold"> @( "Desired interval is overdue by: " + ToReadableString(State.SelectedHabit.ElapsedTime - State.SelectedHabit.DesiredInterval) + " ( " + (State.SelectedHabit.ElapsedToDesiredRatio - 100).ToString("N0") + " % )" )</span></div>
                        }
                    </p>
                }

                @if (DataService.Settings.ShowTimes && State.SelectedHabit.TimeList.Count > 0)
                {
                    <div>Habit times:</div>

                    @foreach (Time time in State.SelectedHabit.TimeList.OrderByDescending(t => t.DateTime))
                    {
                        @if (editTime && State.SelectedTime == time)
                        {
                            <div class="input-group flex-nowrap mb-1">
                                <DateEdit TValue="DateTime" Size="@Theme.Size" Date="@time.DateTime" DateChanged="@((dateTime) => { time.DateTime = dateTime.Date + time.DateTime.TimeOfDay; })" />
                                <TimeEdit TValue="TimeSpan" Size="@Theme.Size" Time="@time.DateTime.TimeOfDay" TimeChanged="@((timeSpan) => { time.DateTime = time.DateTime.Date + timeSpan; })" />
                                <div class="input-group-append">
                                    <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="@(async () => { await DataService.SaveTime(time); State.SelectedTime = null; editTime = false; State.SetSelectedHabit(State.SelectedHabit.Id); })"><span class="fa fa-fw fa-save"></span></Button>
                                    <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="@(() => { State.SelectedTime = null; editTime = false; })"><span class="fa fa-fw fa-times"></span></Button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="input-group flex-nowrap mb-1 d-flex">
                                @*<DateEdit TValue="DateTime" Size="@Theme.Size" ReadOnly="true" Date="@time.DateTime" />
                                <TimeEdit TValue="TimeSpan" Size="@Theme.Size" ReadOnly="true" Time="@time.DateTime.TimeOfDay" />*@

                                <TextEdit Size="@Theme.Size" ReadOnly="true" Text="@(ToReadableString(DateTime.Now - time.DateTime) + " ago")" />

                                <div class="input-group-append">
                                    <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="@(() => { State.SelectedTime = time; editTime = true; })"><span class="fa fa-fw fa-edit"></span></Button>
                                    <Button Color="Color.Primary" Outline="true" Size="@Theme.Size" @onclick="@(async () => { await DataService.DeleteTime(time); State.SelectedHabit = DataService.HabitDict[time.HabitId]; })"><span class="fa fa-fw fa-trash-alt"></span></Button>
                                </div>
                            </div>
                        }
                    }
                }
            </div>

        </div>
    </div>
}
